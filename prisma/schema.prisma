// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String        @id @default(cuid())
  firstName           String?
  lastName            String?
  phoneNumber         String        @unique
  isProfileCompleted  Boolean       @default(false)   
  active              Boolean       @default(true)
  refreshToken        String?       @unique
  refreshTokenExpires DateTime?

  cars                Car[]

  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
}

model Car {
  id                  String        @id @default(cuid())
  productYear         Int
  color               CarColor
  kilometer           Int
  fuel                Fuel
  thirdPartyInsuranceExpiry   DateTime
  bodyInsuranceExpiry         DateTime?
  nextTechnicalInspectionDate DateTime
  nickName            String?

  carTrimId           String        
  carTrim             CarTrim       @relation(fields: [carTrimId], references: [id])

  userId              String
  user                User          @relation(fields: [userId], references: [id])

  refuelLogs          RefuelLog[]
  oilChangeLogs       OilChangeLog[]
  repairLogs          RepairLog[]
  purchaseLogs        PurchaseLog[]

  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt  
}

model RefuelLog {
  id                  String        @id @default(cuid())
  date                DateTime
  liters              Int
  cost                Int
  paymentMethod       RefuelPaymentMethod
  notes               String?

  carId               String
  car                 Car           @relation(fields: [carId], references: [id], onDelete: Cascade)

  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt  
}

model OilChangeLog {
  id                  String        @id @default(cuid())
  date                DateTime
  oilType             OilType
  oilBrandAndModel    String
  kilometer           Int
  cost                Int
  location            String
  notes               String?
  
  oilFilterChanged    Boolean?
  airFilterChanged    Boolean?
  cabinFilterChanged  Boolean?
  fuelFilterChanged   Boolean?

  carId               String
  car                 Car           @relation(fields: [carId], references: [id], onDelete: Cascade)

  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt  
}

model RepairLog{
  id                  String        @id @default(cuid())
  date                DateTime
  part                String
  repairAction        RepairAction
  kilometer           Int
  location            String
  cost                Int
  notes               String?

  carId               String
  car                 Car           @relation(fields: [carId], references: [id], onDelete: Cascade)

  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt  
}

model PurchaseLog {
  id                  String        @id @default(cuid())
  date                DateTime
  part                String
  purchaseCategory    PurchaseCategory
  cost                Int
  location            String
  notes               String?

  carId               String
  car                 Car           @relation(fields: [carId], references: [id], onDelete: Cascade)

  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt 
}

model CarBrand {
  id                  String        @id @default(cuid())
  title               String        @unique
  active              Boolean       @default(true)

  // References
  carModel    CarModel[]

  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt

  @@index([active])
}

model CarModel {
  id                  String        @id @default(cuid())
  title               String
  active              Boolean       @default(true)

  // Foreign key to CarBrand
  carBrandId          String
  CarBrand            CarBrand      @relation(fields: [carBrandId], references: [id], onDelete: Cascade) 

  // Relations
  carTrim       CarTrim[]

  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt

  @@unique([carBrandId, title])
  @@index([carBrandId, active])
}

model CarTrim {
  id                  String        @id @default(cuid())
  title               String        @default("Standard")
  firstYearProd       Int           
  lastYearProd        Int
  active              Boolean       @default(true)

  // References
  carModelId          String
  carModel            CarModel      @relation(fields: [carModelId], references: [id], onDelete: Cascade)

  cars                Car[]

  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt

  @@unique([carModelId, title])
  @@index([carModelId, active])
}

enum CarColor {
  BLACK
  WHITE
  SILVER
  GRAY
  RED
  BLUE
  GREEN
  YELLOW
  ORANGE
  BROWN
  PURPLE
  GOLD
}

enum Fuel {
  GASOLINE
  GAS
  DIESEL
  GASOLINE_GAS
}

enum RefuelPaymentMethod {
  SUBSIDIZED
  MARKET
}

enum OilType {
  ENGINE
  GEARBOX
  BRAKE
  STEERING
}

enum RepairAction {
  REPAIR
  REPLACE
}

enum PurchaseCategory {
  BODY_AND_TRIM
  CONSUMABLE
  MECHANICAL
}